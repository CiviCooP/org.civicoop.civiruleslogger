<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from org.civicoop.civiruleslogger/xml/schema/CRM/Civiruleslogger/CivirulesLog.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:227c49bb84420380c5658fb219fe9fcd)
 */
use CRM_Civiruleslogger_ExtensionUtil as E;

/**
 * Database access object for the CivirulesLog entity.
 */
class CRM_Civiruleslogger_DAO_CivirulesLog extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civirule_civiruleslogger_log';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique CivirulesLog ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Standardized message
   *
   * @var string
   *   (SQL type: varchar(128))
   *   Note that values will be retrieved from the database as a string.
   */
  public $message;

  /**
   * JSON encoded data
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $context;

  /**
   * error level per PSR3
   *
   * @var string|null
   *   (SQL type: varchar(9))
   *   Note that values will be retrieved from the database as a string.
   */
  public $level;

  /**
   * Timestamp of when event occurred.
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $timestamp;

  /**
   * Optional Contact ID that created the log. Not an FK as we keep this regardless
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contact_id;

  /**
   * Optional Rule ID that created the log
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $rule_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civirule_civiruleslogger_log';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Civirules Logs') : E::ts('Civirules Log');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique CivirulesLog ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.id',
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'message' => [
          'name' => 'message',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Message'),
          'description' => E::ts('Standardized message'),
          'required' => TRUE,
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.message',
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'add' => NULL,
        ],
        'context' => [
          'name' => 'context',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Context'),
          'description' => E::ts('JSON encoded data'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.context',
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'add' => NULL,
        ],
        'level' => [
          'name' => 'level',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Level'),
          'description' => E::ts('error level per PSR3'),
          'maxlength' => 9,
          'size' => CRM_Utils_Type::TWELVE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.level',
          'default' => 'info',
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'add' => NULL,
        ],
        'timestamp' => [
          'name' => 'timestamp',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Timestamp'),
          'description' => E::ts('Timestamp of when event occurred.'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.timestamp',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'add' => NULL,
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Contact ID'),
          'description' => E::ts('Optional Contact ID that created the log. Not an FK as we keep this regardless'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.contact_id',
          'default' => NULL,
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'add' => NULL,
        ],
        'rule_id' => [
          'name' => 'rule_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Rule ID'),
          'description' => E::ts('Optional Rule ID that created the log'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civirule_civiruleslogger_log.rule_id',
          'default' => NULL,
          'table_name' => 'civirule_civiruleslogger_log',
          'entity' => 'CivirulesLog',
          'bao' => 'CRM_Civiruleslogger_DAO_CivirulesLog',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, '_civiruleslogger_log', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, '_civiruleslogger_log', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
